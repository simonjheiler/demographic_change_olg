#! python


def build(ctx):

    pass
    # Solve for initial and final stationary equilibrium
    for model in ["initial", "final"]:
        ctx(
            features="run_py_script",
            source="stationary.py",
            deps=[
                ctx.path_to(ctx, "IN_DATA", "efficiency_multiplier.csv"),
                ctx.path_to(ctx, "OUT_DATA", "simulated_demographics.pickle"),
                ctx.path_to(ctx, "IN_MODEL_CODE", "solve.py"),
                ctx.path_to(ctx, "IN_MODEL_CODE", "aggregate.py"),
                ctx.path_to(ctx, "IN_MODEL_SPECS", "setup_general.json"),
                ctx.path_to(ctx, "IN_MODEL_SPECS", f"stationary_{model}.json"),
            ],
            target=ctx.path_to(ctx, "OUT_ANALYSIS", f"stationary_{model}.pickle"),
            append=f"{model} stationary equilibrium",
            name=f"stationary_{model}",
        )

    # Solve for transition dynamics
    ctx(
        features="run_py_script",
        source="transition.py",
        deps=[
            ctx.path_to(ctx, "IN_DATA", "efficiency_multiplier.csv"),
            ctx.path_to(ctx, "OUT_DATA", "simulated_demographics.pickle"),
            ctx.path_to(ctx, "IN_MODEL_CODE", "solve.py"),
            ctx.path_to(ctx, "IN_MODEL_CODE", "aggregate.py"),
            ctx.path_to(ctx, "IN_MODEL_SPECS", "setup_general.json"),
            ctx.path_to(ctx, "IN_MODEL_SPECS", "stationary_initial.json"),
            ctx.path_to(ctx, "IN_MODEL_SPECS", "stationary_final.json"),
            ctx.path_to(ctx, "IN_MODEL_SPECS", "transition_constant_tax_rate.json"),
            ctx.path_to(ctx, "OUT_ANALYSIS", "stationary_initial.pickle"),
            ctx.path_to(ctx, "OUT_ANALYSIS", "stationary_final.pickle"),
        ],
        target=ctx.path_to(ctx, "OUT_ANALYSIS", "transition.pickle"),
        name="transition",
    )
